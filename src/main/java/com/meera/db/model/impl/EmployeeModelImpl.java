package com.meera.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.db.model.Employee;
import com.meera.db.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;Employees_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.db.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author LiferaySavvy
 * @see EmployeeImpl
 * @see com.meera.db.model.Employee
 * @see com.meera.db.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link com.meera.db.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "Employees_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.BIGINT },
            { "surname", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "patronymic", Types.VARCHAR },
            { "employeeGender", Types.VARCHAR },
            { "dateOfBirth", Types.TIMESTAMP },
            { "employeePosition", Types.VARCHAR },
            { "employeeSalary", Types.INTEGER },
            { "employeeWorkPhoneNumber", Types.VARCHAR },
            { "employeeMobilePhoneNumber", Types.VARCHAR },
            { "bankOrganization", Types.VARCHAR },
            { "archiveStatus", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Employees_Employee (employeeId LONG not null primary key,surname VARCHAR(75) null,name VARCHAR(75) null,patronymic VARCHAR(75) null,employeeGender VARCHAR(75) null,dateOfBirth DATE null,employeePosition VARCHAR(75) null,employeeSalary INTEGER,employeeWorkPhoneNumber VARCHAR(75) null,employeeMobilePhoneNumber VARCHAR(75) null,bankOrganization VARCHAR(75) null,archiveStatus VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Employees_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Employees_Employee.employeeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.meera.db.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.meera.db.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.meera.db.model.Employee"),
            true);
    public static long EMPLOYEEGENDER_COLUMN_BITMASK = 1L;
    public static long EMPLOYEEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.meera.db.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employeeId;
    private String _surname;
    private String _name;
    private String _patronymic;
    private String _employeeGender;
    private String _originalEmployeeGender;
    private Date _dateOfBirth;
    private String _employeePosition;
    private int _employeeSalary;
    private String _employeeWorkPhoneNumber;
    private String _employeeMobilePhoneNumber;
    private String _bankOrganization;
    private String _archiveStatus;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("surname", getSurname());
        attributes.put("name", getName());
        attributes.put("patronymic", getPatronymic());
        attributes.put("employeeGender", getEmployeeGender());
        attributes.put("dateOfBirth", getDateOfBirth());
        attributes.put("employeePosition", getEmployeePosition());
        attributes.put("employeeSalary", getEmployeeSalary());
        attributes.put("employeeWorkPhoneNumber", getEmployeeWorkPhoneNumber());
        attributes.put("employeeMobilePhoneNumber",
            getEmployeeMobilePhoneNumber());
        attributes.put("bankOrganization", getBankOrganization());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        String surname = (String) attributes.get("surname");

        if (surname != null) {
            setSurname(surname);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String patronymic = (String) attributes.get("patronymic");

        if (patronymic != null) {
            setPatronymic(patronymic);
        }

        String employeeGender = (String) attributes.get("employeeGender");

        if (employeeGender != null) {
            setEmployeeGender(employeeGender);
        }

        Date dateOfBirth = (Date) attributes.get("dateOfBirth");

        if (dateOfBirth != null) {
            setDateOfBirth(dateOfBirth);
        }

        String employeePosition = (String) attributes.get("employeePosition");

        if (employeePosition != null) {
            setEmployeePosition(employeePosition);
        }

        Integer employeeSalary = (Integer) attributes.get("employeeSalary");

        if (employeeSalary != null) {
            setEmployeeSalary(employeeSalary);
        }

        String employeeWorkPhoneNumber = (String) attributes.get(
                "employeeWorkPhoneNumber");

        if (employeeWorkPhoneNumber != null) {
            setEmployeeWorkPhoneNumber(employeeWorkPhoneNumber);
        }

        String employeeMobilePhoneNumber = (String) attributes.get(
                "employeeMobilePhoneNumber");

        if (employeeMobilePhoneNumber != null) {
            setEmployeeMobilePhoneNumber(employeeMobilePhoneNumber);
        }

        String bankOrganization = (String) attributes.get("bankOrganization");

        if (bankOrganization != null) {
            setBankOrganization(bankOrganization);
        }

        String archiveStatus = (String) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _columnBitmask = -1L;

        _employeeId = employeeId;
    }

    @Override
    public String getSurname() {
        if (_surname == null) {
            return StringPool.BLANK;
        } else {
            return _surname;
        }
    }

    @Override
    public void setSurname(String surname) {
        _surname = surname;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getPatronymic() {
        if (_patronymic == null) {
            return StringPool.BLANK;
        } else {
            return _patronymic;
        }
    }

    @Override
    public void setPatronymic(String patronymic) {
        _patronymic = patronymic;
    }

    @Override
    public String getEmployeeGender() {
        if (_employeeGender == null) {
            return StringPool.BLANK;
        } else {
            return _employeeGender;
        }
    }

    @Override
    public void setEmployeeGender(String employeeGender) {
        _columnBitmask |= EMPLOYEEGENDER_COLUMN_BITMASK;

        if (_originalEmployeeGender == null) {
            _originalEmployeeGender = _employeeGender;
        }

        _employeeGender = employeeGender;
    }

    public String getOriginalEmployeeGender() {
        return GetterUtil.getString(_originalEmployeeGender);
    }

    @Override
    public Date getDateOfBirth() {
        return _dateOfBirth;
    }

    @Override
    public void setDateOfBirth(Date dateOfBirth) {
        _dateOfBirth = dateOfBirth;
    }

    @Override
    public String getEmployeePosition() {
        if (_employeePosition == null) {
            return StringPool.BLANK;
        } else {
            return _employeePosition;
        }
    }

    @Override
    public void setEmployeePosition(String employeePosition) {
        _employeePosition = employeePosition;
    }

    @Override
    public int getEmployeeSalary() {
        return _employeeSalary;
    }

    @Override
    public void setEmployeeSalary(int employeeSalary) {
        _employeeSalary = employeeSalary;
    }

    @Override
    public String getEmployeeWorkPhoneNumber() {
        if (_employeeWorkPhoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _employeeWorkPhoneNumber;
        }
    }

    @Override
    public void setEmployeeWorkPhoneNumber(String employeeWorkPhoneNumber) {
        _employeeWorkPhoneNumber = employeeWorkPhoneNumber;
    }

    @Override
    public String getEmployeeMobilePhoneNumber() {
        if (_employeeMobilePhoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _employeeMobilePhoneNumber;
        }
    }

    @Override
    public void setEmployeeMobilePhoneNumber(String employeeMobilePhoneNumber) {
        _employeeMobilePhoneNumber = employeeMobilePhoneNumber;
    }

    @Override
    public String getBankOrganization() {
        if (_bankOrganization == null) {
            return StringPool.BLANK;
        } else {
            return _bankOrganization;
        }
    }

    @Override
    public void setBankOrganization(String bankOrganization) {
        _bankOrganization = bankOrganization;
    }

    @Override
    public String getArchiveStatus() {
        if (_archiveStatus == null) {
            return StringPool.BLANK;
        } else {
            return _archiveStatus;
        }
    }

    @Override
    public void setArchiveStatus(String archiveStatus) {
        _archiveStatus = archiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setSurname(getSurname());
        employeeImpl.setName(getName());
        employeeImpl.setPatronymic(getPatronymic());
        employeeImpl.setEmployeeGender(getEmployeeGender());
        employeeImpl.setDateOfBirth(getDateOfBirth());
        employeeImpl.setEmployeePosition(getEmployeePosition());
        employeeImpl.setEmployeeSalary(getEmployeeSalary());
        employeeImpl.setEmployeeWorkPhoneNumber(getEmployeeWorkPhoneNumber());
        employeeImpl.setEmployeeMobilePhoneNumber(getEmployeeMobilePhoneNumber());
        employeeImpl.setBankOrganization(getBankOrganization());
        employeeImpl.setArchiveStatus(getArchiveStatus());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        int value = 0;

        if (getEmployeeId() < employee.getEmployeeId()) {
            value = -1;
        } else if (getEmployeeId() > employee.getEmployeeId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalEmployeeGender = employeeModelImpl._employeeGender;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.surname = getSurname();

        String surname = employeeCacheModel.surname;

        if ((surname != null) && (surname.length() == 0)) {
            employeeCacheModel.surname = null;
        }

        employeeCacheModel.name = getName();

        String name = employeeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            employeeCacheModel.name = null;
        }

        employeeCacheModel.patronymic = getPatronymic();

        String patronymic = employeeCacheModel.patronymic;

        if ((patronymic != null) && (patronymic.length() == 0)) {
            employeeCacheModel.patronymic = null;
        }

        employeeCacheModel.employeeGender = getEmployeeGender();

        String employeeGender = employeeCacheModel.employeeGender;

        if ((employeeGender != null) && (employeeGender.length() == 0)) {
            employeeCacheModel.employeeGender = null;
        }

        Date dateOfBirth = getDateOfBirth();

        if (dateOfBirth != null) {
            employeeCacheModel.dateOfBirth = dateOfBirth.getTime();
        } else {
            employeeCacheModel.dateOfBirth = Long.MIN_VALUE;
        }

        employeeCacheModel.employeePosition = getEmployeePosition();

        String employeePosition = employeeCacheModel.employeePosition;

        if ((employeePosition != null) && (employeePosition.length() == 0)) {
            employeeCacheModel.employeePosition = null;
        }

        employeeCacheModel.employeeSalary = getEmployeeSalary();

        employeeCacheModel.employeeWorkPhoneNumber = getEmployeeWorkPhoneNumber();

        String employeeWorkPhoneNumber = employeeCacheModel.employeeWorkPhoneNumber;

        if ((employeeWorkPhoneNumber != null) &&
                (employeeWorkPhoneNumber.length() == 0)) {
            employeeCacheModel.employeeWorkPhoneNumber = null;
        }

        employeeCacheModel.employeeMobilePhoneNumber = getEmployeeMobilePhoneNumber();

        String employeeMobilePhoneNumber = employeeCacheModel.employeeMobilePhoneNumber;

        if ((employeeMobilePhoneNumber != null) &&
                (employeeMobilePhoneNumber.length() == 0)) {
            employeeCacheModel.employeeMobilePhoneNumber = null;
        }

        employeeCacheModel.bankOrganization = getBankOrganization();

        String bankOrganization = employeeCacheModel.bankOrganization;

        if ((bankOrganization != null) && (bankOrganization.length() == 0)) {
            employeeCacheModel.bankOrganization = null;
        }

        employeeCacheModel.archiveStatus = getArchiveStatus();

        String archiveStatus = employeeCacheModel.archiveStatus;

        if ((archiveStatus != null) && (archiveStatus.length() == 0)) {
            employeeCacheModel.archiveStatus = null;
        }

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", surname=");
        sb.append(getSurname());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", patronymic=");
        sb.append(getPatronymic());
        sb.append(", employeeGender=");
        sb.append(getEmployeeGender());
        sb.append(", dateOfBirth=");
        sb.append(getDateOfBirth());
        sb.append(", employeePosition=");
        sb.append(getEmployeePosition());
        sb.append(", employeeSalary=");
        sb.append(getEmployeeSalary());
        sb.append(", employeeWorkPhoneNumber=");
        sb.append(getEmployeeWorkPhoneNumber());
        sb.append(", employeeMobilePhoneNumber=");
        sb.append(getEmployeeMobilePhoneNumber());
        sb.append(", bankOrganization=");
        sb.append(getBankOrganization());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.meera.db.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>surname</column-name><column-value><![CDATA[");
        sb.append(getSurname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patronymic</column-name><column-value><![CDATA[");
        sb.append(getPatronymic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeGender</column-name><column-value><![CDATA[");
        sb.append(getEmployeeGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
        sb.append(getDateOfBirth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeePosition</column-name><column-value><![CDATA[");
        sb.append(getEmployeePosition());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeSalary</column-name><column-value><![CDATA[");
        sb.append(getEmployeeSalary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeWorkPhoneNumber</column-name><column-value><![CDATA[");
        sb.append(getEmployeeWorkPhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeMobilePhoneNumber</column-name><column-value><![CDATA[");
        sb.append(getEmployeeMobilePhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankOrganization</column-name><column-value><![CDATA[");
        sb.append(getBankOrganization());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
