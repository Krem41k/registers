package com.meera.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.db.model.JobDirectory;
import com.meera.db.model.JobDirectoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the JobDirectory service. Represents a row in the &quot;Employees_JobDirectory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.db.model.JobDirectoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobDirectoryImpl}.
 * </p>
 *
 * @author LiferaySavvy
 * @see JobDirectoryImpl
 * @see com.meera.db.model.JobDirectory
 * @see com.meera.db.model.JobDirectoryModel
 * @generated
 */
public class JobDirectoryModelImpl extends BaseModelImpl<JobDirectory>
    implements JobDirectoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a job directory model instance should use the {@link com.meera.db.model.JobDirectory} interface instead.
     */
    public static final String TABLE_NAME = "Employees_JobDirectory";
    public static final Object[][] TABLE_COLUMNS = {
            { "jobDirectoryId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "archiveStatus", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Employees_JobDirectory (jobDirectoryId LONG not null primary key,name VARCHAR(75) null,archiveStatus VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Employees_JobDirectory";
    public static final String ORDER_BY_JPQL = " ORDER BY jobDirectory.jobDirectoryId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Employees_JobDirectory.jobDirectoryId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.meera.db.model.JobDirectory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.meera.db.model.JobDirectory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.meera.db.model.JobDirectory"));
    private static ClassLoader _classLoader = JobDirectory.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            JobDirectory.class
        };
    private long _jobDirectoryId;
    private String _name;
    private String _archiveStatus;
    private JobDirectory _escapedModel;

    public JobDirectoryModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _jobDirectoryId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setJobDirectoryId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _jobDirectoryId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return JobDirectory.class;
    }

    @Override
    public String getModelClassName() {
        return JobDirectory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("jobDirectoryId", getJobDirectoryId());
        attributes.put("name", getName());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long jobDirectoryId = (Long) attributes.get("jobDirectoryId");

        if (jobDirectoryId != null) {
            setJobDirectoryId(jobDirectoryId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String archiveStatus = (String) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @Override
    public long getJobDirectoryId() {
        return _jobDirectoryId;
    }

    @Override
    public void setJobDirectoryId(long jobDirectoryId) {
        _jobDirectoryId = jobDirectoryId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getArchiveStatus() {
        if (_archiveStatus == null) {
            return StringPool.BLANK;
        } else {
            return _archiveStatus;
        }
    }

    @Override
    public void setArchiveStatus(String archiveStatus) {
        _archiveStatus = archiveStatus;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            JobDirectory.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public JobDirectory toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (JobDirectory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        JobDirectoryImpl jobDirectoryImpl = new JobDirectoryImpl();

        jobDirectoryImpl.setJobDirectoryId(getJobDirectoryId());
        jobDirectoryImpl.setName(getName());
        jobDirectoryImpl.setArchiveStatus(getArchiveStatus());

        jobDirectoryImpl.resetOriginalValues();

        return jobDirectoryImpl;
    }

    @Override
    public int compareTo(JobDirectory jobDirectory) {
        int value = 0;

        if (getJobDirectoryId() < jobDirectory.getJobDirectoryId()) {
            value = -1;
        } else if (getJobDirectoryId() > jobDirectory.getJobDirectoryId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof JobDirectory)) {
            return false;
        }

        JobDirectory jobDirectory = (JobDirectory) obj;

        long primaryKey = jobDirectory.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<JobDirectory> toCacheModel() {
        JobDirectoryCacheModel jobDirectoryCacheModel = new JobDirectoryCacheModel();

        jobDirectoryCacheModel.jobDirectoryId = getJobDirectoryId();

        jobDirectoryCacheModel.name = getName();

        String name = jobDirectoryCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            jobDirectoryCacheModel.name = null;
        }

        jobDirectoryCacheModel.archiveStatus = getArchiveStatus();

        String archiveStatus = jobDirectoryCacheModel.archiveStatus;

        if ((archiveStatus != null) && (archiveStatus.length() == 0)) {
            jobDirectoryCacheModel.archiveStatus = null;
        }

        return jobDirectoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{jobDirectoryId=");
        sb.append(getJobDirectoryId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.meera.db.model.JobDirectory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>jobDirectoryId</column-name><column-value><![CDATA[");
        sb.append(getJobDirectoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
