package com.meera.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.db.model.BankOrganization;
import com.meera.db.model.BankOrganizationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BankOrganization service. Represents a row in the &quot;Employees_BankOrganization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.db.model.BankOrganizationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BankOrganizationImpl}.
 * </p>
 *
 * @author LiferaySavvy
 * @see BankOrganizationImpl
 * @see com.meera.db.model.BankOrganization
 * @see com.meera.db.model.BankOrganizationModel
 * @generated
 */
public class BankOrganizationModelImpl extends BaseModelImpl<BankOrganization>
    implements BankOrganizationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a bank organization model instance should use the {@link com.meera.db.model.BankOrganization} interface instead.
     */
    public static final String TABLE_NAME = "Employees_BankOrganization";
    public static final Object[][] TABLE_COLUMNS = {
            { "bankOrganizationId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "BIK", Types.VARCHAR },
            { "adress", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Employees_BankOrganization (bankOrganizationId LONG not null primary key,name VARCHAR(75) null,BIK VARCHAR(75) null,adress VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Employees_BankOrganization";
    public static final String ORDER_BY_JPQL = " ORDER BY bankOrganization.bankOrganizationId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Employees_BankOrganization.bankOrganizationId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.meera.db.model.BankOrganization"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.meera.db.model.BankOrganization"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.meera.db.model.BankOrganization"));
    private static ClassLoader _classLoader = BankOrganization.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BankOrganization.class
        };
    private long _bankOrganizationId;
    private String _name;
    private String _BIK;
    private String _adress;
    private BankOrganization _escapedModel;

    public BankOrganizationModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _bankOrganizationId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setBankOrganizationId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _bankOrganizationId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BankOrganization.class;
    }

    @Override
    public String getModelClassName() {
        return BankOrganization.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("bankOrganizationId", getBankOrganizationId());
        attributes.put("name", getName());
        attributes.put("BIK", getBIK());
        attributes.put("adress", getAdress());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long bankOrganizationId = (Long) attributes.get("bankOrganizationId");

        if (bankOrganizationId != null) {
            setBankOrganizationId(bankOrganizationId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String BIK = (String) attributes.get("BIK");

        if (BIK != null) {
            setBIK(BIK);
        }

        String adress = (String) attributes.get("adress");

        if (adress != null) {
            setAdress(adress);
        }
    }

    @Override
    public long getBankOrganizationId() {
        return _bankOrganizationId;
    }

    @Override
    public void setBankOrganizationId(long bankOrganizationId) {
        _bankOrganizationId = bankOrganizationId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getBIK() {
        if (_BIK == null) {
            return StringPool.BLANK;
        } else {
            return _BIK;
        }
    }

    @Override
    public void setBIK(String BIK) {
        _BIK = BIK;
    }

    @Override
    public String getAdress() {
        if (_adress == null) {
            return StringPool.BLANK;
        } else {
            return _adress;
        }
    }

    @Override
    public void setAdress(String adress) {
        _adress = adress;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            BankOrganization.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public BankOrganization toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BankOrganization) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BankOrganizationImpl bankOrganizationImpl = new BankOrganizationImpl();

        bankOrganizationImpl.setBankOrganizationId(getBankOrganizationId());
        bankOrganizationImpl.setName(getName());
        bankOrganizationImpl.setBIK(getBIK());
        bankOrganizationImpl.setAdress(getAdress());

        bankOrganizationImpl.resetOriginalValues();

        return bankOrganizationImpl;
    }

    @Override
    public int compareTo(BankOrganization bankOrganization) {
        int value = 0;

        if (getBankOrganizationId() < bankOrganization.getBankOrganizationId()) {
            value = -1;
        } else if (getBankOrganizationId() > bankOrganization.getBankOrganizationId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BankOrganization)) {
            return false;
        }

        BankOrganization bankOrganization = (BankOrganization) obj;

        long primaryKey = bankOrganization.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<BankOrganization> toCacheModel() {
        BankOrganizationCacheModel bankOrganizationCacheModel = new BankOrganizationCacheModel();

        bankOrganizationCacheModel.bankOrganizationId = getBankOrganizationId();

        bankOrganizationCacheModel.name = getName();

        String name = bankOrganizationCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            bankOrganizationCacheModel.name = null;
        }

        bankOrganizationCacheModel.BIK = getBIK();

        String BIK = bankOrganizationCacheModel.BIK;

        if ((BIK != null) && (BIK.length() == 0)) {
            bankOrganizationCacheModel.BIK = null;
        }

        bankOrganizationCacheModel.adress = getAdress();

        String adress = bankOrganizationCacheModel.adress;

        if ((adress != null) && (adress.length() == 0)) {
            bankOrganizationCacheModel.adress = null;
        }

        return bankOrganizationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{bankOrganizationId=");
        sb.append(getBankOrganizationId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", BIK=");
        sb.append(getBIK());
        sb.append(", adress=");
        sb.append(getAdress());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.meera.db.model.BankOrganization");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>bankOrganizationId</column-name><column-value><![CDATA[");
        sb.append(getBankOrganizationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>BIK</column-name><column-value><![CDATA[");
        sb.append(getBIK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adress</column-name><column-value><![CDATA[");
        sb.append(getAdress());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
